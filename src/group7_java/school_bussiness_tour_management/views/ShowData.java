/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package group7_java.school_bussiness_tour_management.views;

import group7_java.school_bussiness_tour_management.common.MessageDialog;
import group7_java.school_bussiness_tour_management.models.Company;
import group7_java.school_bussiness_tour_management.models.Student;
import group7_java.school_bussiness_tour_management.models.StudentTour;
import group7_java.school_bussiness_tour_management.models.Teacher;
import group7_java.school_bussiness_tour_management.models.Tour;
import group7_java.school_bussiness_tour_management.services.CompanyService;
import group7_java.school_bussiness_tour_management.services.StudentService;
import group7_java.school_bussiness_tour_management.services.TeacherService;
import group7_java.school_bussiness_tour_management.services.TourService;
import java.util.List;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NGUYEN TRANG
 */
public class ShowData extends javax.swing.JFrame {

    /**
     * Creates new form ShowData
     */
    private String typeData;
    private String backToPage;
    private int tourId;
    private int teacherId;

    public void setTypeData(String type) {
        this.typeData = type;
        checkAndInitializeTable();
    }

    public void setBackToPage(String page) {
        this.backToPage = page;
        checkAndInitializeTable();
    }

    public synchronized void setTourID(int tour) {
        this.tourId = tour;
    }

    public void setTeacherIDOfShowData(int teaID) {
        this.teacherId = teaID;
    }

    public ShowData() {
        initComponents();
    }

    private void checkAndInitializeTable() {
        if (typeData != null && backToPage != null) {
            if (typeData.equalsIgnoreCase("teachers")) {
                titleMainLabel.setText("Danh sách giáo viên đại diện doanh nghiệp");
                initializeTableOfTeachers();
            } else if (typeData.equalsIgnoreCase("students")) {
                titleMainLabel.setText("Danh sách sinh viên được quản lý");
                initializeTableOfStudents();
            } else if (typeData.equalsIgnoreCase("companys")) {
                titleMainLabel.setText("Danh sách doanh nghiệp liên kết với nhà trường");
                initializeTableOfCompanys();
            } else if (typeData.equalsIgnoreCase("tours")) {
                titleMainLabel.setText("Danh sách các chuyến tham quan được tổ chức");
                initializeTableOfTours();
            } else {
                titleMainLabel.setText("Danh sách sinh viên của chuyến tham quan");
                initializeTableOfStudentsIndex();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleMainLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        backButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Xem dữ liệu");

        titleMainLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleMainLabel.setText("Danh sách sinh viên được quản lí");
        titleMainLabel.setToolTipText("");

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(dataTable);

        backButton.setText("Quay lại trang trước");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(221, Short.MAX_VALUE)
                .addComponent(titleMainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(220, 220, 220))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(titleMainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        dispose();
        if (backToPage.equalsIgnoreCase("managetoursofteacher")) {

            try {
                Teacher selectedTea = TeacherService.getTeacherByIndex(teacherId);
                ManageToursOfTeacher manageToursOfTeacherScreen = new ManageToursOfTeacher();
                if (manageToursOfTeacherScreen != null) {
                    manageToursOfTeacherScreen.setLocationRelativeTo(null);
                    manageToursOfTeacherScreen.setVisible(true);
                    manageToursOfTeacherScreen.getTeacherIdLabel().setText("Mã doanh nghiệp: " + selectedTea.getCode());
                    manageToursOfTeacherScreen.getTeacherNameLabel().setText("Tên giáo viên: " + selectedTea.getLastName() + " " + selectedTea.getFirstName());
                    manageToursOfTeacherScreen.getTeacherPhoneNumberLabel().setText("Số điện thoại: " + selectedTea.getPhoneNumber());
                    manageToursOfTeacherScreen.getTeacherEmailLable().setText("Email: " + selectedTea.getEmail());
                    manageToursOfTeacherScreen.getTeacherAdressLable().setText("Địa chỉ: " + selectedTea.getAddress());
                    manageToursOfTeacherScreen.setTeacherID(selectedTea.getId());
                    manageToursOfTeacherScreen.initializeTable();
                    dispose();
                }
            } catch (Exception ex) {
                MessageDialog.showErrorDialog(this, "Có lỗi, chi tiết: " + ex.getMessage(), "Lỗi");
            }

        } else if (backToPage.equalsIgnoreCase("home")) {
            Home home = new Home();
            home.setLocationRelativeTo(null);
            home.setVisible(true);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ShowData().setVisible(true);
        });
    }

    // With data of teaches
    private DefaultTableModel tableModel;

    private void loadTableDataOfTeachers() {
        try {
            List<Teacher> data = TeacherService.getAllTeachers();
            tableModel.setRowCount(0);
            if (data != null) {
                for (Teacher tea : data) {
                    tableModel.addRow(new Object[]{tea.getCode(), tea.getLastName() + " " + tea.getFirstName(), tea.getAddress(), tea.getPhoneNumber(), tea.getEmail(), tea.getBirthDate()
                    });
                }
            }
            tableModel.fireTableDataChanged();
        } catch (Exception e) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + e.getMessage(), "Có lỗi xảy ra");
            e.printStackTrace();
        }
    }

    private void initializeTableOfTeachers() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã giáo viên", "Họ tên",
            "Địa chỉ", "Điện thoại", "Email", "Ngày sinh"});
        dataTable.setModel(tableModel);
        loadTableDataOfTeachers();
    }

    // With data of tours
    private void loadTableDataOfTours() {
        try {
            List<Tour> tour_data = TourService.getAllTours();
            List<Company> company_data = CompanyService.getAllCompanies();
            List<Teacher> teacher_data = TeacherService.getAllTeachers();
            tableModel.setRowCount(0);
            if (tour_data != null) {
                for (Tour tour : tour_data) {
                    String companyName = "";
                    String teacherName = "";
                    for (Company comp : company_data) {
                        if (comp.getId() == tour.getCompanyId()) {
                            companyName = comp.getName();
                        }
                    }
                    for (Teacher tea : teacher_data) {
                        if (tea.getId() == tour.getTeacherId()) {
                            teacherName = tea.getLastName() + " " + tea.getFirstName();
                        }
                    }
                    tableModel.addRow(new Object[]{tour.getCode(), tour.getName(),
                        tour.getStartDate(), tour.getDescription(),
                        tour.getAvailables(),
                        tour.getPresentator(), companyName, teacherName});
                }
            }
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    private void initializeTableOfTours() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã chuyến", "Tên chuyến", "Thời gian", "Mô tả",
            "Số lượng", "Người đại diện", "Công ty", "Giáo viên"});
        dataTable.setModel(tableModel);

        loadTableDataOfTours();
    }

    // With data of companys
    private void loadTableDataOfCompanys() {
        try {
            List<Company> data = CompanyService.getAllCompanies();
            tableModel.setRowCount(0);
            if (data != null) {
                for (Company com : data) {
                    tableModel.addRow(new Object[]{com.getCode(), com.getName(), com.getAddress(),
                        com.getEmail(), com.getPhoneNumber(),
                        com.getDescription()});
                }
            }
            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    private void initializeTableOfCompanys() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã doanh nghiệp", "Doanh nghiệp", "Địa chỉ",
            "Email", "Điện thoại", "Mô tả"});
        dataTable.setModel(tableModel);

        loadTableDataOfCompanys();
    }

    // With data of students
    private void loadTableDataOfStudents() {
        try {
            List<Student> data = StudentService.getAllStudents();
            tableModel.setRowCount(0);
            if (data != null) {
                for (Student stu : data) {
                    tableModel.addRow(new Object[]{stu.getCode(), stu.getLastName(), stu.getFirstName(), stu.getAddress(), stu.getPhoneNumber(), stu.getEmail(), stu.getBirthDate(), stu.getClassId()
                    });
                }
            }
            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    private void initializeTableOfStudents() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã sinh viên", "Họ", "Tên", "Địa chỉ", "SĐT", "Email", "Ngày sinh", "Class id"});
        dataTable.setModel(tableModel);

        loadTableDataOfStudents();
    }

    //With data of studentTours
    private void loadTableDataOfStudentsIndex() {
        try {
            Tour tour = TourService.getTourByIndex(tourId);
            System.out.println("tour: " + tourId);
            List<StudentTour> data = tour.getStudentTours();
            List<Student> students = StudentService.getAllStudents();
            tableModel.setRowCount(0);
            if (data != null && students != null) {
                System.out.println("datasize: " + data.size());
                if (data.size() > 0) {
                    for (Student stu : students) {
                        boolean containsId = containsStudentTourWithId(data, stu.getId());
                        if (containsId) {
                            tableModel.addRow(new Object[]{stu.getCode(), stu.getLastName(), stu.getFirstName(), stu.getAddress(), stu.getPhoneNumber(), stu.getEmail(), stu.getBirthDate(), stu.getClassId()
                            });
                        }

                    }
                }
            }
            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    private static boolean containsStudentTourWithId(List<StudentTour> studentTours, int targetId) {
        for (StudentTour studentTour : studentTours) {
            if (studentTour.getStudentId() == targetId) {
                return true;
            }
        }
        return false;
    }

    private void initializeTableOfStudentsIndex() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã sinh viên", "Họ", "Tên", "Địa chỉ", "SĐT", "Email", "Ngày sinh", "Class id"});
        dataTable.setModel(tableModel);
        loadTableDataOfStudentsIndex();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton backButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel titleMainLabel;
    // End of variables declaration//GEN-END:variables
}
